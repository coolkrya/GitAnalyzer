---
title: "Анализ синтетических данных коммитов"
format:
  html:
    code-fold: false
    code-tools: false
    toc: true
    toc-depth: 2
    number-sections: true
    theme: cosmo
    df-print: paged
  pdf: default
execute:
  echo: false  # скрыть исходный код
  warning: false
  message: false
---

```{r}

# Подгрузка библиотек

library(isotree)
library(dplyr)
library(lubridate)
library(ggplot2)
library(readr)
library(purrr)
library(tidyr)

library(knitr)
library(kableExtra)

library(httr)
library(dplyr)
library(jsonlite)
library(stringr)
library(dotenv)


env=new.env()
source("etl_phase.R", local=env)
df <- env$df
### Первичная статистика по использованию времени для коммитов
author_stats <- df %>% group_by(author_name, author_email) %>% summarise( commits = n(), avg_lines_added = mean(lines_added), avg_lines_removed = mean(lines_removed), most_common_lang = names(sort(table(file_language), decreasing = TRUE)[1]), common_commit_hour = round(mean(hour)), .groups = "drop" )

author_stats %>%
  kable("html") %>%
  kable_styling(full_width = TRUE, bootstrap_options = c("striped", "hover")) %>%
  scroll_box(width = "100%")

ggplot(df, aes(x = hour, fill = author_name)) + geom_histogram(binwidth = 1, position = "dodge") + labs(title = "Коммиты по часу суток", x = "Час", y = "Количество") + theme_minimal()

### Статистика используемых языков
ggplot(df, aes(x = file_language, fill = author_name)) + geom_bar(position = "dodge") + labs(title = "Языки в коммитах", x = "Язык", y = "Количество") + theme_minimal()



### Процентаж коммитов

author_share <- df %>%
  count(author_name) %>%
  mutate(percentage = n / sum(n) * 100)

### Круговая диаграмма
ggplot(author_share, aes(x = "", y = percentage, fill = author_name)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  labs(title = "Коммиты по авторам (pie chart)") +
  theme_void() +
  theme(legend.title = element_blank())


```
# Общая модель isolation tree
```{r} 
# Преобразуем дату и добавим признаки
df <- df %>%
  mutate(
    authored_date = ymd_hms(authored_date),
    hour = hour(authored_date),
    wday = wday(authored_date, label = TRUE),
    commit_size = lines_added + lines_removed,
    file_language = as.factor(file_language),
    lang_code = as.numeric(file_language)
  ) %>%
  filter(!is.na(author_email), !is.na(lines_added), !is.na(lines_removed))



# Получаем список авторов
authors <- unique(df$author_email)

# Функция анализа одного автора
analyze_author <- function(author_data) {
  features <- author_data %>%
    select(lines_added, lines_removed, commit_size, hour, lang_code) %>%
    na.omit()
  
  if (nrow(features) < 10) {
    return(NULL)  # Пропускаем авторов с недостаточно данных
  }
  
  features_matrix <- as.matrix(features)
  
  model <- isolation.forest(features_matrix, ntrees = 100)
  author_data <- author_data[complete.cases(features), ]
  author_data$anomaly_score <- predict(model, features_matrix, type = "score")
  
  author_data 
}

# Применяем к каждому автору
results <- df %>%
  split(.$author_name) %>%
  map_dfr(analyze_author)

# Выводим топ аномалий
top_anomalies <- results %>%
  arrange(desc(anomaly_score)) %>%
  group_by(author_name) %>%
  slice_max(anomaly_score, n = 3)  # по 3 на автора

top_anomalies %>%
  kable("html") %>%
  kable_styling(full_width = TRUE, bootstrap_options = c("striped", "hover")) %>%
  scroll_box(width = "100%")

# Визуализация для одного автора 
for (author in authors) {
print(ggplot(results %>% filter(author_email == author),
       aes(x = commit_size, y = hour, color = anomaly_score)) +
  geom_point(alpha = 0.7, size = 2) +
  scale_color_gradient(low = "blue", high = "red") +
  labs(title = paste("Аномалии для", author),
       x = "Размер коммита", y = "Час", color = "Аномальность") +
  theme_minimal())
}


```
# Isolation tree для поиска аномалий в языках
```{r}
# Выбор признаков (автор, email, язык)
df_model <- df %>%
  select(author_name, author_email, file_language)

# Преобразуем категориальные данные в факторы, затем в числовой формат
df_encoded <- df_model %>%
  mutate(
    author_name = as.numeric(as.factor(author_name)),
    author_email = as.numeric(as.factor(author_email)),
    file_language = as.numeric(as.factor(file_language))
  )


# Обучаем модель
iso_model <- isolation.forest(df_encoded, ntrees = 100) 

# Получаем anomaly scores
scores <- predict(iso_model, df_encoded, type = "score")

# Помечаем аномалии (например, если score > 0.65 — это аномалия)
threshold <- 0.6
df$anomaly_score <- scores
df$is_anomaly <- scores > threshold

anomalies <- df %>% filter(is_anomaly == TRUE)

anomalies %>%
  arrange(desc(anomaly_score)) %>%
  kable("html") %>%
  kable_styling(full_width = TRUE, bootstrap_options = c("striped", "hover")) %>%
  scroll_box(width = "100%")



```
# Isolation forest для времени
```{r}

# Извлекаем временные признаки
df_time <- df %>%
  mutate(
    hour = hour(authored_date),
    wday = wday(authored_date),  # 1 = воскресенье, 7 = суббота
    is_weekend = ifelse(wday %in% c(1, 7), 1, 0)
  ) %>%
  select(hour, wday, is_weekend)

model_time <- isolation.forest(df_time, ntrees = 100)

# Получаем оценки аномальности
df$anomaly_score_time <- predict(model_time, df_time, type = "score")
df$is_anomaly_time <- df$anomaly_score_time > 0.6

anomalies_time <- df %>% filter(is_anomaly_time == TRUE)"
anomalies_time %>%"
  arrange(desc(anomaly_score_time)) %>%
  kable("html") %>%
  kable_styling(full_width = TRUE, bootstrap_options = c("striped", "hover")) %>%
  scroll_box(width = "100%")



```
